

/*
 * SquareDriver.java
 */
import lejos.hardware.motor.EV3LargeRegulatedMotor;

public class Driver {
	private static final int FORWARD_SPEED = 200;
	private static final int ROTATE_SPEED = 125;
	public Driver(Odometer odo, EV3LargeRegulatedMotor leftMotor, EV3LargeRegulatedMotor rightMotor,
		double leftRadius, double rightRadius, double width){
		// reset the motors
		for (EV3LargeRegulatedMotor motor : new EV3LargeRegulatedMotor[] { leftMotor, rightMotor }) {
			motor.stop();
			motor.setAcceleration(600);
		}
	}
	
	private void driveToPosition(Position finalPos) {
		
		// wait 5 seconds
		try {
			Thread.sleep(2000);
		} catch (InterruptedException e) {
			// there is nothing to be done here because it is not expected that
			// the odometer will be interrupted by another thread
		}
		//first we need to rotate the correct amount
		
		double deltaY = finalPos.getY()-currPos.getY();
		double deltaX = finalPos.getX()-currPos.getX();
		double hypotenuse = Math.sqrt(Math.pow(deltaY,2) + Math.pow(deltaX,2));
		double newTheta = Math.atan((double) deltaY/((double) deltaX))*360.0/(2*Math.PI);
		//System.out.println("new theta: " + newTheta);
		double thetaToRotate = newTheta - currPos.getTheta();
		
		if(thetaToRotate > 180){
			thetaToRotate = thetaToRotate-360.0;
		}else if(thetaToRotate < -180){
			thetaToRotate = thetaToRotate+360.0;
		}
		
		leftMotor.setSpeed(ROTATE_SPEED);
		rightMotor.setSpeed(ROTATE_SPEED);
		leftMotor.rotate(-convertAngle(leftRadius, width, thetaToRotate), true);
		rightMotor.rotate(convertAngle(rightRadius, width, thetaToRotate), false);
		//System.out.println("Angle to rotate: " + convertAngle(rightRadius, width, thetaToRotate));
		leftMotor.setSpeed(FORWARD_SPEED);
		rightMotor.setSpeed(FORWARD_SPEED);
		leftMotor.rotate(convertDistance(leftRadius, hypotenuse), true);
		rightMotor.rotate(convertDistance(rightRadius, hypotenuse), false);
		

		leftMotor.setSpeed(ROTATE_SPEED);
		rightMotor.setSpeed(ROTATE_SPEED);
		leftMotor.rotate(-convertAngle(leftRadius, width, finalPos.getTheta() -thetaToRotate), true);
		rightMotor.rotate(convertAngle(rightRadius, width, finalPos.getTheta() -thetaToRotate), false);
	}
	//Conversion methods.
	private static int convertDistance(double radius, double distance) {
		return (int) ((180.0 * distance) / (Math.PI * radius));
	}

	private static int convertAngle(double radius, double width, double angle) {
		return convertDistance(radius, Math.PI * width * angle / 360.0);
	}
}