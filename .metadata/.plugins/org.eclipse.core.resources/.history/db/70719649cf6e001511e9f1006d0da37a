import lejos.hardware.Sound;
import lejos.hardware.motor.EV3LargeRegulatedMotor;
import lejos.robotics.SampleProvider;

public class USLocalizer {
	public enum LocalizationType { FALLING_EDGE, RISING_EDGE };
	public static int ROTATION_SPEED = 30;
	private Odometer odo;
	private SampleProvider usSensor;
	private float[] usData;
	private LocalizationType locType;
	//Motors (we will get these from the odometer)
	private EV3LargeRegulatedMotor leftMotor, rightMotor;
	
	public USLocalizer(Odometer odo,  SampleProvider usSensor, float[] usData, LocalizationType locType) {
		this.odo = odo;
		this.usSensor = usSensor;
		this.usData = usData;
		this.locType = locType;
		//get the motors from the odometer object.
		EV3LargeRegulatedMotor[] motors = this.odo.getMotors();
		this.leftMotor = motors[0];
		this.rightMotor = motors[1];
	}
	
	public void doLocalization() {
		double [] pos = new double [3];
		double angleA, angleB;
		
		//set the rotational speed of the motors
		leftMotor.setSpeed(ROTATION_SPEED);
		rightMotor.setSpeed(ROTATION_SPEED);
		
		if (locType == LocalizationType.FALLING_EDGE) {
					
			// rotate the robot until it sees no wall
			while(getFilteredData() < 41){
				leftMotor.forward();
				rightMotor.backward();
			}
			Sound.beep();
			System.out.println(getFilteredData());
			// keep rotating until the robot sees a wall, then latch the angle
			while(getFilteredData() > 40){
				leftMotor.forward();
				rightMotor.backward();
			}
			Sound.beep();
			//get the angle from the odometer
			angleA = odo.getAng();
			
			// switch direction and wait until it sees no wall
			while(getFilteredData() < 41){
				leftMotor.backward();
				rightMotor.forward();
			}
			Sound.beep();
			
			// keep rotating until the robot sees a wall, then latch the angle
			while(getFilteredData() > 40){
				leftMotor.backward();
				rightMotor.forward();
			}
			Sound.beep();
			leftMotor.stop();
			rightMotor.stop();
			//get the angle from the odometer
			angleB = odo.getAng();
			
			// angleA is clockwise from angleB, so assume the average of the
			// angles to the right of angleB is 45 degrees past 'north'
			double averageAngle = (angleA + angleB)/2;
			Sound.beep();
			//rotate to the diagonal
			leftMotor.rotate(convertAngle(Lab4.WHEEL_RADIUS, Lab4.TRACK, averageAngle+45), true);
			rightMotor.rotate(-convertAngle(Lab4.WHEEL_RADIUS, Lab4.TRACK, averageAngle+45), false);
			
			// update the odometer position (example to follow:)
			odo.setPosition(new double [] {0.0, 0.0, 0}, new boolean [] {true, true, true});
		} else {
			/*
			 * The robot should turn until it sees the wall, then look for the
			 * "rising edges:" the points where it no longer sees the wall.
			 * This is very similar to the FALLING_EDGE routine, but the robot
			 * will face toward the wall for most of it.
			 */
			// rotate the robot until it sees a wall
			while(getFilteredData() > 40){
				leftMotor.backward();
				rightMotor.forward();
			}
			Sound.beep();
			// keep rotating until the robot no longer sees the wall, then latch the angle
			while(getFilteredData() < 40){
				leftMotor.backward();
				rightMotor.forward();
			}
			Sound.beep();
			angleA = odo.getAng();
			
			//switch directions and rotate until the robot sees the wall.
			while(getFilteredData() > 40){
				leftMotor.forward();
				rightMotor.backward();
			}
			Sound.beep();
			// rotate until the robot no longer sees the wall and latch the angle.
			while(getFilteredData() < 40){
				leftMotor.forward();
				rightMotor.backward();
			}
			Sound.beep();
			leftMotor.stop();
			rightMotor.stop();
			angleB = odo.getAng();
			
			// angleA is clockwise from angleB, so assume the average of the
			// angles to the right of angleB is 45 degrees past 'north'
			double averageAngle = (angleA + angleB)/2;
			double FortyFiveDegPastNorth = averageAngle + angleB;
			Sound.beep();
			//rotate to the diagonal
			leftMotor.rotate(convertAngle(Lab4.WHEEL_RADIUS, Lab4.TRACK, FortyFiveDegPastNorth ), true);
			rightMotor.rotate(-convertAngle(Lab4.WHEEL_RADIUS, Lab4.TRACK, FortyFiveDegPastNorth), false);
			
			// update the odometer position (example to follow:)
			odo.setPosition(new double [] {0.0, 0.0, -135}, new boolean [] {true, true, true});
		}
	}

	//Conversion methods.
	private static int convertDistance(double radius, double distance) {
		return (int) ((180.0 * distance) / (Math.PI * radius));
	}

	private static int convertAngle(double radius, double width, double angle) {
		return convertDistance(radius, Math.PI * width * angle / 360.0);
	}
	private float getFilteredData() {
		usSensor.fetchSample(usData, 0);
		float distance = (int)(usData[0]*100.0);
				
		return distance;
	}



}
