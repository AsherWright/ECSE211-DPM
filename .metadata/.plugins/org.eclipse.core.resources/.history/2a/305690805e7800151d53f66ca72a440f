/*
 * LightLocalizer.java
 * Alessandro Commodari and Asher Wright
 * ECSE 211 DPM Lab 4 - Localization
 * Group 53
 * Given that the robot is facing 0 degrees in the first block,
 * uses the color sensor to localize the robot by reading black lines while spinnning around.
 */
import lejos.hardware.Sound;
import lejos.hardware.motor.EV3LargeRegulatedMotor;
import lejos.robotics.SampleProvider;
import lejos.utility.Timer;
import lejos.utility.TimerListener;

public class BlockDetector implements TimerListener {
	//constants
		//class variables
	//private Odometer odo;
	private static final double DETECTIONTHRESHOLDERROR = 0.06;
	private SampleProvider colorSensor;
	private float[] colorData;
	private boolean isReadingBlock;
	private String blockType;
	private float[] RGBValues;
	private double[] blueBlockReading;
	private double[] darkBlueBlockReading;
	private double[] noObjectReading;
	private Timer timer;
	private final int DEFAULT_TIMEOUT_PERIOD = 20;
	//motors
	//private EV3LargeRegulatedMotor leftMotor, rightMotor;
	//Navigation navi; //the navigation class
	
	public BlockDetector(SampleProvider colorSensor, float[] colorData, boolean autostart) {
		//get incoming values for variables
		//this.odo = odo;
		this.colorSensor = colorSensor;
		this.colorData = colorData;
		blockType = "Other";
		blueBlockReading = new double[3];
		noObjectReading = new double[3];
		darkBlueBlockReading = new double[3];
		blueBlockReading[0] = 0.15;
		blueBlockReading[1] = 0.22;
		blueBlockReading[2] = 0.16;
		darkBlueBlockReading[0] = 0.03;
		darkBlueBlockReading[1] = 0.07;
		darkBlueBlockReading[2] = 0.09;
		noObjectReading[0] = 0;
		noObjectReading[1] = 0;
		noObjectReading[2] = 0;
		isReadingBlock = false;
		if (autostart) {
			// if the timeout interval is given as <= 0, default to 20ms timeout 
			this.timer = new Timer((30 <= 0) ? 30 : DEFAULT_TIMEOUT_PERIOD, this);
			this.timer.start();
		} else
			this.timer = null;
	}
	/*
	 * (non-Javadoc)
	 * @see java.lang.Thread#run()
	 * The method that is called when this thread starts.
	 */
	@Override
	public void timedOut() {
		// TODO Auto-generated method stub
		//gets the data from the color sensor.
		colorSensor.fetchSample(colorData, 0);
		
		//TODO: create conditions for what is a close match.
		double totalBlueBlockError = 0;
		double totalNoObjectError = 0;
		double totalDarkBlueBlockError = 0;
		for(int i = 0; i < 3; i++){
			totalBlueBlockError += Math.abs(colorData[i] - blueBlockReading[i]);
			totalNoObjectError += Math.abs(colorData[i] - noObjectReading[i]);
			totalDarkBlueBlockError += Math.abs(colorData[i] - darkBlueBlockReading[i]);
		}
		//If our reading is within the allowed number to consider it a blue block, update what it sees.
		if(totalBlueBlockError < DETECTIONTHRESHOLDERROR){
			blockType = "BLOCK";
			isReadingBlock =true;
		}else if(totalNoObjectError < DETECTIONTHRESHOLDERROR){
			blockType = "";
			isReadingBlock = false;
		}else if(totalDarkBlueBlockError < DETECTIONTHRESHOLDERROR){
			blockType = "BLOCK";
			isReadingBlock = true;
		}else{
			blockType = "NOT BLOCK";
			isReadingBlock = true;
		}
	}

	//accessors
	public float[] getColorData(){
		synchronized (this) {
			return colorData;	
		}
	}
	public String getBlockType(){
		synchronized (this) {
			return blockType;	
		}
	
	}
	public boolean isReadingBlock(){
		synchronized (this) {
			return isReadingBlock;	
		}
	}


}
